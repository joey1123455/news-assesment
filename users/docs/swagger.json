{
    "swagger": "2.0",
    "info": {
        "description": "This is a user management service for the news aggregator system",
        "title": "News Aggregator user service",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Joseph Folayan",
            "email": "folayanjoey@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "51.21.106.236:8000",
    "basePath": "/api",
    "paths": {
        "/auth/forgotpassword": {
            "post": {
                "description": "Reset user password using the provided reset token and new password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Forgot password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reset token for password reset",
                        "name": "resetToken",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User credentials for password reset",
                        "name": "userCredential",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password data updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Token is invalid or has expired",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Error while resetting password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Sign in a user with the provided credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Sign in a user",
                "operationId": "signInUser",
                "parameters": [
                    {
                        "description": "User credentials for signing in",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SignInInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/controllers.SignInOkRes"
                        }
                    },
                    "400": {
                        "description": "fail",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "fail",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "fail",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "get": {
                "description": "Logout a user by clearing the access_token, refresh_token, and logged_in cookies.",
                "produces": [
                    "application/json"
                ],
                "summary": "Logout a user",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "get": {
                "description": "Refresh the access token using the provided refresh token",
                "produces": [
                    "application/json"
                ],
                "summary": "Refresh access token",
                "operationId": "refreshAccessToken",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/controllers.SignInOkRes"
                        }
                    },
                    "403": {
                        "description": "fail",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Sign up a new user with the provided information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Sign up user",
                "parameters": [
                    {
                        "description": "User information for sign up",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SignUpInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "We sent an email with a verification code to email@example.com",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Passwords do not match",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "502": {
                        "description": "Error while signing up new user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/resetpassword/{resetToken}": {
            "patch": {
                "description": "Reset user password using the provided reset token and new password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reset token for password reset",
                        "name": "resetToken",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User credentials for password reset",
                        "name": "userCredential",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ResetPasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password data updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Token is invalid or has expired",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Error while resetting password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/verifyemail/{verificationCode}": {
            "get": {
                "description": "Verify email address using the provided verification code.",
                "produces": [
                    "application/json"
                ],
                "summary": "Verify email address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Verification code for email verification",
                        "name": "verificationCode",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Error while verifying email",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get details of the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get current user details",
                "responses": {
                    "200": {
                        "description": "Current user details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.ErrResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "controllers.SignInOkRes": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.ResetPasswordInput": {
            "type": "object",
            "required": [
                "password",
                "passwordConfirm"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "passwordConfirm": {
                    "type": "string"
                }
            }
        },
        "models.SignInInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.SignUpInput": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "passwordConfirm"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "passwordConfirm": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "type": "apiKey",
            "name": "Authorization, access_token",
            "in": "header, cookie"
        }
    }
}