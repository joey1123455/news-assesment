basePath: /api
definitions:
  controllers.ErrResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  controllers.SignInOkRes:
    properties:
      access_token:
        type: string
      status:
        type: string
    type: object
  models.ResetPasswordInput:
    properties:
      password:
        type: string
      passwordConfirm:
        type: string
    required:
    - password
    - passwordConfirm
    type: object
  models.SignInInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.SignUpInput:
    properties:
      created_at:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      passwordConfirm:
        type: string
      role:
        type: string
      updated_at:
        type: string
      verified:
        type: boolean
    required:
    - email
    - name
    - password
    - passwordConfirm
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: folayanjoey@gmail.com
    name: Joseph Folayan
  description: This is a user management service for the news aggregator system
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: News Aggregator user service
  version: "1.0"
paths:
  /auth/logout:
    post:
      description: Logout a user by clearing the access_token, refresh_token, and
        logged_in cookies.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            type: string
      summary: Logout a user
  /auth/refresh:
    get:
      description: Refresh the access token using the provided refresh token
      operationId: refreshAccessToken
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/controllers.SignInOkRes'
        "403":
          description: fail
          schema:
            $ref: '#/definitions/controllers.ErrResponse'
      summary: Refresh access token
  /auth/reset-password/{resetToken}:
    post:
      consumes:
      - application/json
      description: Reset user password using the provided reset token and new password.
      parameters:
      - description: Reset token for password reset
        in: path
        name: resetToken
        required: true
        type: string
      - description: User credentials for password reset
        in: body
        name: userCredential
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: Password data updated successfully
          schema:
            type: string
        "400":
          description: Token is invalid or has expired
          schema:
            type: string
        "403":
          description: Error while resetting password
          schema:
            type: string
      summary: Reset password
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Sign up a new user with the provided information.
      parameters:
      - description: User information for sign up
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.SignUpInput'
      produces:
      - application/json
      responses:
        "201":
          description: We sent an email with a verification code to email@example.com
          schema:
            type: string
        "400":
          description: Passwords do not match
          schema:
            type: string
        "409":
          description: Email already exists
          schema:
            type: string
        "502":
          description: Error while signing up new user
          schema:
            type: string
      summary: Sign up user
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Sign in a user with the provided credentials
      operationId: signInUser
      parameters:
      - description: User credentials for signing in
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/controllers.SignInOkRes'
        "400":
          description: fail
          schema:
            $ref: '#/definitions/controllers.ErrResponse'
        "401":
          description: fail
          schema:
            $ref: '#/definitions/controllers.ErrResponse'
        "500":
          description: fail
          schema:
            $ref: '#/definitions/controllers.ErrResponse'
      summary: Sign in a user
  /auth/verify-email/{verificationCode}:
    post:
      description: Verify email address using the provided verification code.
      parameters:
      - description: Verification code for email verification
        in: path
        name: verificationCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
          schema:
            type: string
        "403":
          description: Error while verifying email
          schema:
            type: string
      summary: Verify email address
  /user/me:
    get:
      description: Get details of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: Current user details retrieved successfully
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized access
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get current user details
securityDefinitions:
  JWT:
    in: header, cookie
    name: Authorization, access_token
    type: apiKey
swagger: "2.0"
